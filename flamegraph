#!/usr/bin/env python3
#
# Pass arguments to perf-record (almost) as-is.
#
# Collect samples with perf, render flamegraph, upload it and print
# public URI.
#

import sys, tempfile, subprocess, os, pwd, grp, json, urllib.parse

def bundled(util):
    return os.path.join(os.path.dirname(os.readlink(__file__) if os.path.islink(__file__) else __file__), util)

# ensure we have GitHub API token
api_token = os.getenv('FLAMEGRAPH_API_TOKEN')
if not api_token:
    sys.stderr.write('FLAMEGRAPH_API_TOKEN not set, exiting\n')
    sys.stderr.write('Note: token needed to upload a Gist to GitHub\n')
    if os.getenv('SUDO_USER'):
        sys.stderr.write('Use "sudo -E" to preserve environment variables.\n')
    sys.exit(-1)

# collect samples
perf_record_out = tempfile.NamedTemporaryFile()

args = sys.argv[1:]
try:
    dashdash = args.index('--')
except ValueError:
    dashdash = -1
args[dashdash:dashdash] = ['-g', '-o', perf_record_out.name]

try:
    perf_record = subprocess.Popen(['/usr/bin/perf', 'record'] + args)
    try:
        returncode = perf_record.wait()
        if returncode != 0:
            sys.exit(returncode) # user passed incorrect arguments to perf
    except KeyboardInterrupt:
        perf_record.wait()
except OSError as ex:
    sys.stderr.write("Is perf installed? " + ex.strerror + "\n")
    sys.exit(1)

print('Processing samples...')

perf_script_out = subprocess.check_output([
    '/usr/bin/perf', 'script', '-i', perf_record_out.name])

perf_record_out.close() # unlinks
del perf_record_out

# unsudo now
if os.getuid() == 0:
    sudo_uid = os.getenv('SUDO_UID')
    next_uid = sudo_uid and int(sudo_uid) or pwd.getpwnam('nobody').pw_uid
    sudo_gid = os.getenv('SUDO_GID')
    next_gid = sudo_gid and int(sudo_gid) or grp.getgrnam('nogroup').gr_gid
    os.setgroups([])
    os.setgid(next_gid)
    os.setuid(next_uid)

# collapse stacks
collapse_util = subprocess.Popen([
    bundled('FlameGraph/stackcollapse-perf.pl')],
    stdin = subprocess.PIPE, stdout = subprocess.PIPE)

samples, _ = collapse_util.communicate(perf_script_out)
del perf_script_out

if samples == b'':
    sys.stderr.write('no relevant samples captured, exiting\n')
    sys.exit(-1)

# render SVG
title = ' '.join(sys.argv)
render_util = subprocess.Popen([
    bundled('FlameGraph/flamegraph.pl'), '--title', title],
    stdin = subprocess.PIPE, stdout = subprocess.PIPE)

svg, _ = render_util.communicate(samples)

# upload
api_request = json.dumps({
    'description': title,
    'public': True,
    'files': {
        'g.svg': {'content': svg.decode('utf-8')},
        'samples.txt': {'content': samples.decode('utf-8')}
    }
})

upload_util = subprocess.Popen([
    '/usr/bin/curl', '-H', 'Authorization: token ' + api_token, '-sd', '@/dev/fd/0', 'https://api.github.com/gists'],
    stdin = subprocess.PIPE, stdout = subprocess.PIPE)

api_response, _ = upload_util.communicate(bytes(api_request, 'utf-8'))

try:
    raw_url = json.loads(api_response.decode('utf-8'))['files']['g.svg']['raw_url']
except KeyError:
    print(api_response)
    sys.exit(-1)

# s/gist.githubusercontent.com/gist.githack.com/
# github serves raw files as text/plain
print(urllib.parse.urlparse(raw_url)._replace(netloc=u'gist.githack.com').geturl())
